{
  "id": "42470928",
  "stage": "repair",
  "repo_addr": "https://github.com/darktable-org/rawspeed.git",
  "fix_commit": "27808d5a8dc8d13c64e88c0a819f5cd29b274979",
  "project": "librawspeed",
  "note": [
    "Reason for requesting line 106 of /src/librawspeed/src/librawspeed/common/RawImage.cpp: To understand how RawImageData allocates and (potentially) initializes its internal data buffer, which is reported as uninitialized."
  ],
  "valid_patches": null,
  "history": [
    {
      "reason": "To understand how RawImageData allocates and (potentially) initializes its internal data buffer, which is reported as uninitialized.",
      "line": 106,
      "file": "/src/librawspeed/src/librawspeed/common/RawImage.cpp"
    },
    {
      "reason": "The allocated memory for `data` is not initialized after `alignedMallocArray`. MemorySanitizer reports a use-of-uninitialized-value when `checkMemIsInitialized` is called. The `alignedMalloc` function, which is ultimately called, does not guarantee zero-initialization. Therefore, the allocated data buffer should be explicitly zero-initialized to prevent reading uninitialized values.",
      "patches": [
        {
          "file": "/src/librawspeed/src/librawspeed/common/RawImage.cpp",
          "diff": [
            {
              "line_number": 107,
              "content": [
                "  if (!data)",
                "    ThrowRDE(\"Memory Allocation failed.\");",
                "",
                "  // Zero-initialize the allocated memory to prevent uninitialized reads",
                "  memset(data, 0, static_cast<size_t>(dim.y) * pitch);"
              ]
            }
          ]
        }
      ]
    }
  ]
}